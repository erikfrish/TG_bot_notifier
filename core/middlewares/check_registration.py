from datetime import datetime
from aiogram import BaseMiddleware
from typing import Callable, Awaitable, Dict, Any
from aiogram.types import Message, TelegramObject, Update
from core.utils.pg_connect import is_user_registered, register_user
from core.keyboards.reply import get_user_contact_keyboard


class if_not_registered(BaseMiddleware):
    def __init__(self) -> None:
        self.registered_flag: bool

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ):
        if event.text == '/start' or event.text == '/run' or event.text == '/—Å—Ç–∞—Ä—Ç':
            return await handler(event, data)
        # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ò –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø—Ä–æ—à—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        if (not await is_user_registered(event.from_user.id)):
            if (event.contact == None):
                await event.answer("C–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!", reply_markup=get_user_contact_keyboard())
            elif (event.contact.user_id != event.from_user.id):
                await event.answer("üòÇ –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ <b>—Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç</b>.\nC–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç! ü§® ", reply_markup=get_user_contact_keyboard())
            else:
                await register_user(event.contact.user_id, event.from_user.username, event.contact.phone_number)
                return await handler(event, data)
        # –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            # await event.delete(reply_markup=ReplyKeyboardRemove())
            return await handler(event, data)
